Time
Time
Time*dT
Time*dT
Time
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT),dT*2)), meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
length(seq(dT,(Time*dT),dT*2)
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2,
title="Gravity waves in water")
}
maxY=max(vecR,vecD)
minY=min(vecR,vecD)
plot(array(seq(dT,(Time*dT),dT)), vecR, type = 'l', col = "green",
ylab = "", xlab = "time [s]", ylim = c(minY,maxY), main = "Seasonal changes")
lines(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
legend(x = "bottomleft", inset=0, bty='n', lwd=1,
legend=c("Plant growth factor","Discharge factor"),
col=c("green","blue"))
lengseq(dT,(Time*dT),dT*2)
length(seq(dT,(Time*dT),dT*2)
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2,
title="Gravity waves in water")
}
maxY=max(vecR,vecD)
minY=min(vecR,vecD)
plot(array(seq(dT,(Time*dT),dT)), vecR, type = 'l', col = "green",
ylab = "", xlab = "time [s]", ylim = c(minY,maxY), main = "Seasonal changes")
lines(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
legend(x = "bottomleft", inset=0, bty='n', lwd=1,
legend=c("Plant growth factor","Discharge factor"),
col=c("green","blue"))
length(seq(dT,(Time*dT),dT*2))
length(seq(dT,(Time*dT),dT))
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT),dT)), meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
meanVeg2 = 0
for(k in meanVeg){
if(!is.na(k)) {
meanVeg2[length(meanVeg2)+1]=k
}
}
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT),dT*2)), meanVeg2, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
meanVeg
meanVeg2 = 0
for(k in 1:meanVeg){
if(!is.na(k)) {
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2 = 0
for(k in meanVeg){
if(!is.na(k)) {
meanVeg2[length(meanVeg2)+1]=k
}
}
length(meanVeg2)*2
length(meanVeg2)*3
meanVeg2 = 0
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
couter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2 = 0
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2
meanVeg2
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2
meanVeg
meanVeg2 = 0
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(meanVeg[k])) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(meanVeg[k])) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
length(meanVeg2)/length(meanVeg)
meanVeg2 = meanVeg2[2]:meanVeg2
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = meanVeg2[2]:meanVeg2[length(meanVeg2)]
meanVeg
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg3=meanVeg2[2:length(meanVeg2)]
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(1:504493), meanVeg3, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(1:504492), meanVeg3, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
1e+05
1*e^5
(1e+05==10000)
(1e+05==100000)
EndTime
EndTime
NumFrames = 4*300         # Number of times the graph is updated
EndTime   = 6*NumFrames   # The simulation duration
EndTime
meanVeg[1500000:15000100]
meanVeg[1000000:10000100]
meanVeg[1001000:10001100]
dT        = 0.05        # The timestep
meanVeg[1002000:10002100]
meanVeg[1003000:10003100]
meanVeg[1008000:10008100]
meanVeg[1007000:10007100]
meanVeg[1007500:10007600]
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
length(array(seq(dT,(Time*dT),dT)))
length(array(seq(dT,(Time*dT),dT)))
length(array(seq(dT,(Time*dT),dT*saveTime)))
length(array(seq(dT,(Time*dT-1),dT*saveTime)))
TimeArray=array(seq(dT,(Time*dT),dT))
TimeArray=array(seq(dT,(Time*dT),dT*5))
TimeArray=TimeArray[1:lenght(TimeArray)-1]
TimeArray=TimeArray[1:length(TimeArray)-1]
plot(TimeArray, meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(TimeArray, meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT/saveTime),dT)), meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
NumFrames = 4*300         # Number of times the graph is updated
EndTime   = 4*6*NumFrames   # The simulation duration
NumFrames = 4*300         # Number of times the graph is updated
EndTime   = 6*NumFrames   # The simulation duration
library(DAISIE)
print(Galapagos)
library(DAISIE)
view(Galapagos_datatable)
library(readr)
rep_2_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_2/rep_2_branching.txt",
col_names = FALSE)
View(rep_2_branching)
library(DAISIE)
DAISIE_dataprep(rep_2_branching,10,100)
library(readr)
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = {"Clade_name","Status","Missing_species","Branching_times"})
View(rep_1_branching)
library(readr)
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = FALSE)
View(rep_1_branching)
DAISIE_sim(4, 1000, c(0.9, 0.09, 1000000000, 0.002, 0.87), 100, 'CS', 25)
DAISIE_sim(4, 1000, c(0.2, 0.09, 10, 0.2, 0.87), 100, 'CS', 25)
DAISIE_sim(4, 1000, c(0.2, 0.09, 10, 0.2, 0.87), 5, 'CS', 25)
data <- DAISIE_sim(4, 1000, c(0.2, 0.09, 10, 0.2, 0.87), 5, 'CS', 25)
data
col_names = {"Clade_name", "Status", "Missing_species", "Branching_times"}
col_names = list("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
col_names = vector("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
col_names("Clade_name", "Status", "Missing_species", "Branching_times")
col_names = c("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_1_branching)
DAISIE_dataprep(rep_1_branching,10,100)
prepData <- DAISIE_dataprep(rep_1_branching,10,100)
estimates <- DAISIE_ML(prepData)
prepData
rep_5_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_5_branching)
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_1_branching)
library(DAISIE)
library(readr)
col_names = c("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_1_branching)
prepData <- DAISIE_dataprep(rep_1_branching,10,100)
DAISIE_plot_island(prepData,10)
DAISIE_plot_island(prepData,10)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_branching.R', echo=TRUE)
### pipeline to analyse branching output of ArchiDAISIE ###
### written by Sebastian Mader on the 20.11.2018, s.mader@student.rug.nl ###
library(DAISIE)
library(readr)
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = TRUE)
View(rep_1_branching)
prepData <- DAISIE_dataprep(rep_1_branching,10,100)
DAISIE_plot_island(prepData,10)
#estimates <- DAISIE_ML(prepData)
#which starting points for ML? -> the once I gave it?
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_branching.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
setwd("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago")
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_branching.R', echo=TRUE)
setwd("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago")
library(DAISIE)
library(readr)
replicates <- 100
rep_1_STT <- read_csv("/ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_1_STT.txt")
rep_1_STT <- read_csv("~/ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_1_STT.txt")
View(rep_1_STT)
rep_1_STT <- read_csv("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_1_STT.txt")
View(rep_1_STT)
island_replicates[[rep]][[1]]$stt_all <- read_csv("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_"+rep+"_STT.txt")
island_replicates = list()
island_replicates[[rep]][[1]]$stt_all <- read_csv("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_"+rep+"_STT.txt")
island_replicates[[rep]][[1]]$stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",rep,"_STT.txt"))
island_replicates[[rep]][[1]]$stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.string(rep),"_STT.txt"))
island_replicates[[rep]][[1]]$stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt"))
paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt")
"ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_" + as.character(rep) + "_STT.txt"
"ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_" + as.character(replicates) + "_STT.txt"
paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_", as.character(replicates), "_STT.txt")
paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_", as.character(replicates, sep=""), "_STT.txt")
paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_", as.character(replicates), "_STT.txt", sep = "")
island_replicates[[rep]][[1]]$stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
f
for(rep in 1 : replicates) {
island_replicates[[rep]][[1]]$stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
}
library(DAISIE)
library(readr)
replicates <- 100
island_replicates = list()
for(rep in 1 : replicates) {
island_replicates[[rep]][[1]]$stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
}
length(island_replicates)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
island_replicates = list()
for(rep in 1 : replicates) {
island_replicates[[rep]] = list()
}
for(rep in 1 : replicates) {
island_replicates[[rep]][[1]]$stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
}
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
DAISIE_plot_sims(island_replicates = island_replicates)
DAISIE_plot_sims(island_replicates = island_replicates)
stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
DAISIE_plot_sims(island_replicates = island_replicates)
stt <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(replicates),"_STT.txt", sep = ""))
stt
for(rep in 1 : replicates) {
island_replicates[[rep]] = list()
stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
island_replicates[[rep]][[1]] = data.frame(stt_all = stt_all)
}
island_replicates[[1]][[1]]$stt_all[,1]
stt[,1]
replicates <- 10
island_replicates = list()
for(rep in 1 : replicates) {
island_replicates[[rep]] = list()
stt_all <- read_csv(paste("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_",as.character(rep),"_STT.txt", sep = ""))
island_replicates[[rep]][[1]] = list(stt_all = stt_all)
}
island_replicates[[1]][[1]]$stt_all[,1]
DAISIE_plot_sims(island_replicates = island_replicates)
island_replicates[[1]][[1]]$stt_all[,1]
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
island_replicates[[1]][[1]]$stt_all[,c('Time',"nI","nA","nC")]
island_replicates[[10]][[1]]$stt_all[,c('Time',"nI","nA","nC")]
island_replicates[[11]][[1]]$stt_all[,c('Time',"nI","nA","nC")]
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
length(island_replicates)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_branching.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
island_replicates
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_branching.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_branching.R', echo=TRUE)
rep_1_branching
rep_1_branching$Branching_times[1]
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
setwd("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago")
rep_1_branching <- read_csv("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_1_branching.txt",
col_names = TRUE)
### pipeline to analyse branching output of ArchiDAISIE ###
### written by Sebastian Mader on the 20.11.2018, s.mader@student.rug.nl ###
library(DAISIE)
library(readr)
rep_1_branching <- read_csv("ArchiDAISIE/ArchiDAISIE/sims/sim_1/rep_1_branching.txt",
col_names = TRUE)
View(rep_1_branching)
prepData <- DAISIE_dataprep(rep_1_branching,10,100)
DAISIE_plot_island(prepData,10)
#estimates <- DAISIE_ML(prepData)
#which starting points for ML? -> the once I gave it?
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R', echo=TRUE)
read_csv("ArchiDAISIE/ArchiDAISIE/parameter_sets.txt")
view(read_csv("ArchiDAISIE/ArchiDAISIE/parameter_sets.txt"))
View(read_csv("ArchiDAISIE/ArchiDAISIE/parameter_sets.txt"))
View(read_csv("ArchiDAISIE/ArchiDAISIE/parameter_sets.txt"))
View(read_csv("ArchiDAISIE/ArchiDAISIE/parameter_sets.txt"))
View(read_csv("ArchiDAISIE/ArchiDAISIE/parameter_sets.txt"))
View(read_csv("ArchiDAISIE/ArchiDAISIE/parameter_sets.txt"))
setwd("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago")
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
View(stt_all)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
ls(list=rm)
rm(list = ls())
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/pipeline_to_DAISIE_STT.R')
getwd
getwd()
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
debugSource('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
debugSource('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
library(DAISIE)
library(readr)
replicates <- 1000
sim_names <- dir(path = "./test_sims")
sim_names
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/pipeline_to_DAISIE_STT.R')
