for(rep in 1:replicates) {
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,10,100)
#estimates <- DAISIE_ML(prepData)
#which starting points for ML? -> the once I gave it => YES!
}
}
rm(list = ls())
library(DAISIE)
library(readr)
replicates <- 1000
dir_name_sims <- "sims/"
sim_names <- dir(path = dir_name_sims)
for(sim_name in sim_names) {
replicate_estimates = list()
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
View(parameter_sets)
parameters <- parameter_sets[which(parameter_sets[,1]==sim_name),]
for(sim_name in sim_names) {
replicate_estimates = list()
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
View(parameter_sets)
for(sim_name in sim_names) {
for(sim_name in sim_names) {
replicate_estimates = list()
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
View(parameter_sets)
parameters <- parameter_sets[which(parameter_sets[,1]==sim_name),]
sim_name = "standard"
parameters <- parameter_sets[which(parameter_sets[,1]==sim_name),]
sim_name = "standard"
sim_name = "standard"
parameters <- parameter_sets[which(parameter_sets[,1]==sim_name),]
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
parameters <- parameter_sets[which(parameter_sets[,1]==sim_name),]
View(parameters)
estimates <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),)
immi <- parameters[2] * parameters[11]
clado <- parameters[4] + parameters[7]
ana <- parameters[5] + parameters[8]
ext <- parameters[6] + parameters[9]
K <- parameters[10] * parameters[11]
initOptPars <- c(clado,ext,K,immi,ana)
for(rep in 1:replicates) {
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,10,100)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
View(immi)
View(parameter_sets)
immi <- as.numeric(parameters[2]) * as.numeric(parameters[11])
class parameter_sets
class(parameter_sets)
clado <- parameters[4] + parameters[7]
class(parameters[2])
class(clado)
parameters8888888888888
parameters <- as.vector(parameter_sets[which(parameter_sets[,1]==sim_name),])
parameters[1]
parameters[2]
is.numeric(parameters[2])
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
prepData <- DAISIE_dataprep(branching,10,100)
prepData
str(prepData)
View(branching)
branching[,3]
prepData[,3]
prepData[2]
prepData[[2]]$missing_species
as.numeric(branching[,3])
as.numeric(unlist(branching[,3]))
branching[,3] <- as.numeric(unlist(branching[,3]))
prepData <- DAISIE_dataprep(branching,10,100)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
prepData
View(brachning)
View(branching)
str(branching)
as.matrix(branching)
prepData <- DAISIE_dataprep(branching,10,100)
prepData
str(prepData)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
branching[[,3]]
branching[,3]
as.vector(branching[,3])
as.numeric(branching[,3])
as.matrix(branching)
as.numeric(branching[,3])
as.matrix(branching[,3])
prepData <- DAISIE_dataprep(branching,10,100)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
branching[,3] <- as.matrix(branching[,3])
prepData <- DAISIE_dataprep(branching,10,100)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
str(prepData)
branching[,3] <- as.data.frame(branching[,3])
prepData <- DAISIE_dataprep(branching,10,100)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
as.data.frame(branching)
prepData <- DAISIE_dataprep(branching,10,100)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
str(prepData)
install.packages("C:/Users/Sebastian/Desktop/DAISIE_1.5.tar.gz", repos = NULL, type = "source")
install.packages(c("foreach","doParallel"))
install.packages("C:/Users/Sebastian/Desktop/DAISIE_1.5.tar.gz", repos = NULL, type = "source")
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
library(DAISIE)
library(readr)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
str(branching)
as.data.frame(branching)
str(branching)
prepData <- DAISIE_dataprep(branching,10,100)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
str(prepData)
View(prepData)
as.data.frame(branching)
str(branching)
as.data.frame(branching)
str(branching)
as.matrix(branching)
str(branching)
prepData <- DAISIE_dataprep(branching,10,100)
str(prepData)
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
str(branching)
prepData <- DAISIE_dataprep(branching,10,100)
str(prepData)
branching[,3] <- as.character(branching[,3])
str(branching)
prepData <- DAISIE_dataprep(branching,10,100)
str(prepData)
branching[,3] <- as.numeric(branching[,3])
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
branching[,3] <- as.numeric(branching[,3])
branching[,3] <- as.data.frame(branching[,3])
str(branching)
prepData <- DAISIE_dataprep(branching,10,100)
str(prepData)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
str(branching)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,10,100)
str(prepData)
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
str(branching)
prepData <- DAISIE_dataprep(branching,10,100)
str(prepData)
length(branching)
length(prepData)
prepData[[i]]$missing_species
for(i in 2:length(prepData) {
prepData[[i]]$missing_species
}
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
}
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species
}
prepData[[i]]$missing_species
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
str(prepData)
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
branching[,3] <- as.data.frame(branching[,3])
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,10,1000)
str(prepData)
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
}
str(prepData)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
archiImmi <- parameters[2]
View(archiImmi)
archiImmi <- parameters[[2]]
assertthat::are_equal(sim_name, parameters[[1]])
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
debugSource('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
View(parameters)
debugSource('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
assertthat::are_equal(sim_name, as.character(parameters[[1]]))
immi <- archiImmi * archiNIsl
archiImmi <- parameters[[2]]
archiMig <- parameters[[3]]
archiCladoL <- parameters[[4]]
archiAnaL <- parameters[[5]]
archiExtL <- parameters[[6]]
archiCladoG <- parameters[[7]]
archiAnaG <- parameters[[8]]
archiExtG <- parameters[[9]]
archiKPerIsl <- parameters[[10]]
archiNIsl <- parameters[[11]]
immi <- archiImmi * archiNIsl
immi
is.numeric(immi)
for(rep in 1:replicates) {
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,10,1000)
str(prepData)
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
}
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
replicate_estimates = list()
parameters <- as.vector(parameter_sets[which(parameter_sets[,1]==sim_name),])
assertthat::are_equal(sim_name, as.character(parameters[[1]]))
archiImmi <- parameters[[2]]
archiMig <- parameters[[3]]
archiCladoL <- parameters[[4]]
archiAnaL <- parameters[[5]]
archiExtL <- parameters[[6]]
archiCladoG <- parameters[[7]]
archiAnaG <- parameters[[8]]
archiExtG <- parameters[[9]]
archiKPerIsl <- parameters[[10]]
archiNIsl <- parameters[[11]]
immi <- archiImmi * archiNIsl
clado <- archiCladoL + archiCladoG
ana <- archiAnaL + archiAnaG
ext <- archiExtL + archiExtG
K <- archiKPerIsl * archiNIsl
initOptPars <- c(clado,ext,K,immi,ana)
for(rep in 1:replicates) {
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,10,1000)
str(prepData)
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
}
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
replicate_estimates
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
str(branching)
prepData <- DAISIE_dataprep(branching,10,1000)
str(prepData)
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
str(prepData)
save(replicate_estimates, parameters, initOptPars, file = paste(dir_name_sims, "/", sim_name, "_estimates.Rdata", sep = ""))
save(replicate_estimates, parameters, initOptPars,
file = paste(dir_name_sims, "/", sim_name, "/",sim_name, "_estimates.Rdata", sep = ""))
View(parameters)
save(replicate_estimates, parameters, initOptPars,
file = paste("estimates/",sim_name, "_estimates.Rdata", sep = ""))
save(replicate_estimates, parameters, initOptPars,
file = paste("estimates/",sim_name, "_estimates.Rdata", sep = ""))
length(sim_names)
sim_names1 <- sim_names[1:length(sim_names)/3]
sim_names1
sim_names1 <- sim_names[length(sim_names):2*length(sim_names)/3]
sim_names1
length(sim_names)/3:2*length(sim_names)/3
length(sim_names)/3
2*length(sim_names)/3
library(DAISIE)
library(readr)
dir_name_sims <- "sims/"
sim_names <- dir(path = dir_name_sims)
sim_names3 <- sim_names[2*length(sim_names)/3:length(sim_names)]
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
rm(list = ls())
library(DAISIE)
library(readr)
dir_name_sims <- "sims/"
sim_names <- dir(path = dir_name_sims)
sim_names2 <- sim_names[length(sim_names)/3:2*length(sim_names)/3]
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
rm(list = ls())
library(DAISIE)
library(readr)
dir_name_sims <- "sims/"
sim_names <- dir(path = dir_name_sims)
sim_names2 <- sim_names[length(sim_names)/3:2*length(sim_names)/3]
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
parameter_sets
getwd()
print(sim_name)
replicate_estimates = list()
parameters <- as.vector(parameter_sets[which(parameter_sets[,1]==sim_name),])
print(parameters)
dir_name_sims <- "sims/"
sim_names <- dir(path = dir_name_sims)
sim_names2 <- sim_names[length(sim_names)/3:2*length(sim_names)/3]
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
for(sim_name in sim_names2) {
print(sim_name)
replicate_estimates = list()
parameters <- as.vector(parameter_sets[which(parameter_sets[,1]==sim_name),])
print(parameters)
assertthat::are_equal(sim_name, as.character(parameters[[1]]))
archiImmi <- parameters[[2]]
archiMig <- parameters[[3]]
archiCladoL <- parameters[[4]]
archiAnaL <- parameters[[5]]
archiExtL <- parameters[[6]]
archiCladoG <- parameters[[7]]
archiAnaG <- parameters[[8]]
archiExtG <- parameters[[9]]
archiKPerIsl <- parameters[[10]]
archiNIsl <- parameters[[11]]
archiAge <- parameters[[12]]
archiMainlandSp <- parameters[[13]]
archiReplicates <- parameters[[14]]
immi <- archiImmi * archiNIsl
clado <- archiCladoL + archiCladoG
ana <- archiAnaL + archiAnaG
ext <- archiExtL + archiExtG
K <- archiKPerIsl * archiNIsl
initOptPars <- c(clado,ext,K,immi,ana)
for(rep in 1:archiReplicates) {
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,island_age = archiAge, M = archiMainlandSp)
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
}
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
assertthat::are_equal(length(replicate_estimates),archiReplicates)
replicate_estimates
save(replicate_estimates, parameters, initOptPars,
file = paste("estimates/",sim_name, "_estimates.Rdata", sep = ""))
}
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching1.R')
setwd("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts")
main_dir <- "../"
dir_name_sims <- "sims/"
sim_names <- dir(path = paste(main_dir,dir_name_sims, sep=""))
sim_names
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching1.R')
save(replicate_estimates, parameters, initOptPars,
file = paste("estimates/",sim_name, "_estimates.Rdata", sep = ""))
save(replicate_estimates, parameters, initOptPars,
file = paste("../estimates/",sim_name, "_estimates.Rdata", sep = ""))
library(DAISIE)
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching3.R')
debugSource('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_branching.R')
library(DAISIE)
library(readr)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
rep_2_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/sims/high_clado_l/rep_2_branching.txt")
View(rep_2_branching)
DAISIE_dataprep(rep_2_branching,10,1000)
library(readr)
rep_10_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/sims/high_clado_l/rep_10_branching.txt")
View(rep_10_branching)
DAISIE_dataprep(rep_10_branching,10,1000)
library(readr)
rep_1_STT <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/sims/high_clado_l/rep_1_STT.txt")
View(rep_1_STT)
rep_1_STT[,"nA"]
rep_1_STT[,"nA"]+rep_1_STT[,"nC"]
rm(list = ls())
library(DAISIE)
library(readr)
replicates <- 1000
main_dir <- "../"
dir_name_sims <- "sims/"
sim_names <- dir(path = dir_name_sims)
num_species <- list(sim_names = sim_names)
num_species
length(num_species)
length(sim_names)
main_dir <- "../"
dir_name_sims <- "sims/"
sim_names <- dir(path = paste(main_dir,dir_name_sims, sep= ""))
num_species <- list(sim_names = sim_names)
length(num_species)
length(sim_names)
num_species
num_species <- list()
for(sim in 1:length(sim_names)) {
num_species[[sim]] = list(sim_name = sim_names[[sim]])
}
length(num_species)
num_species
debugSource('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_STT.R')
debugSource('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts/pipeline_to_DAISIE_STT.R')
for(sim in 1:length(sim_names)) {
num_species[[sim]] = list(sim_name = sim_names[[sim]],
sum_endemic = vector(),
sum_nonend = vector(),
total = vector())
}
num_species
complete_arr
complete_arr
View(stt_average_all)
View(stt_all)
View(stt_average_all)
small_array <- complete_arr[c(1,2)]
small_array
small_array <- complete_arr[,,c(1,2)]
small_array
stt_average_all_test<-apply(small_array,c(1,2),median)
stt_average_all_test
