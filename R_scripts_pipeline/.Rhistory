source('~/Studium/Master/RU Groningen/Courses/Modeling/project/SWE_with_plants_PROJECT.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/SWE_with_plants_PROJECT.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/SWE_with_plants_PROJECT.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/SWE_with_plants_PROJECT.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/SWE_with_plants_PROJECT.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/SWE_with_plants_PROJECT.R', echo=TRUE)
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
aD = aD + ampD*DincAmp
aD = aD + ampD*DincAmp
Time/dt
Time/dT
Time
Time
Time*dT
Time*dT
Time
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT),dT*2)), meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
length(seq(dT,(Time*dT),dT*2)
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2,
title="Gravity waves in water")
}
maxY=max(vecR,vecD)
minY=min(vecR,vecD)
plot(array(seq(dT,(Time*dT),dT)), vecR, type = 'l', col = "green",
ylab = "", xlab = "time [s]", ylim = c(minY,maxY), main = "Seasonal changes")
lines(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
legend(x = "bottomleft", inset=0, bty='n', lwd=1,
legend=c("Plant growth factor","Discharge factor"),
col=c("green","blue"))
lengseq(dT,(Time*dT),dT*2)
length(seq(dT,(Time*dT),dT*2)
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2,
title="Gravity waves in water")
}
maxY=max(vecR,vecD)
minY=min(vecR,vecD)
plot(array(seq(dT,(Time*dT),dT)), vecR, type = 'l', col = "green",
ylab = "", xlab = "time [s]", ylim = c(minY,maxY), main = "Seasonal changes")
lines(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
legend(x = "bottomleft", inset=0, bty='n', lwd=1,
legend=c("Plant growth factor","Discharge factor"),
col=c("green","blue"))
length(seq(dT,(Time*dT),dT*2))
length(seq(dT,(Time*dT),dT))
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT),dT)), meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
meanVeg2 = 0
for(k in meanVeg){
if(!is.na(k)) {
meanVeg2[length(meanVeg2)+1]=k
}
}
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT),dT*2)), meanVeg2, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
meanVeg
meanVeg2 = 0
for(k in 1:meanVeg){
if(!is.na(k)) {
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2 = 0
for(k in meanVeg){
if(!is.na(k)) {
meanVeg2[length(meanVeg2)+1]=k
}
}
length(meanVeg2)*2
length(meanVeg2)*3
meanVeg2 = 0
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
couter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2 = 0
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2
meanVeg2
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
meanVeg2
meanVeg
meanVeg2 = 0
counter = 0
for(k in meanVeg){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=k
}
}
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(k)) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(meanVeg[k])) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(!is.na(meanVeg[k])) {
counter = counter+1
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
length(meanVeg2)/length(meanVeg)
meanVeg2 = meanVeg2[2]:meanVeg2
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg2 = meanVeg2[2]:meanVeg2[length(meanVeg2)]
meanVeg
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg
meanVeg2 = 0
counter = 0
for(k in 1:length(meanVeg)){
if(is.na(meanVeg[k])) {counter = counter+1}
if(!is.na(meanVeg[k])) {
meanVeg2[length(meanVeg2)+1]=meanVeg[k]
}
}
meanVeg3=meanVeg2[2:length(meanVeg2)]
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(1:504493), meanVeg3, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(1:504492), meanVeg3, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
1e+05
1*e^5
(1e+05==10000)
(1e+05==100000)
EndTime
EndTime
NumFrames = 4*300         # Number of times the graph is updated
EndTime   = 6*NumFrames   # The simulation duration
EndTime
meanVeg[1500000:15000100]
meanVeg[1000000:10000100]
meanVeg[1001000:10001100]
dT        = 0.05        # The timestep
meanVeg[1002000:10002100]
meanVeg[1003000:10003100]
meanVeg[1008000:10008100]
meanVeg[1007000:10007100]
meanVeg[1007500:10007600]
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
source('~/Studium/Master/RU Groningen/Courses/Modeling/project/StreamVegi_final.R')
length(array(seq(dT,(Time*dT),dT)))
length(array(seq(dT,(Time*dT),dT)))
length(array(seq(dT,(Time*dT),dT*saveTime)))
length(array(seq(dT,(Time*dT-1),dT*saveTime)))
TimeArray=array(seq(dT,(Time*dT),dT))
TimeArray=array(seq(dT,(Time*dT),dT*5))
TimeArray=TimeArray[1:lenght(TimeArray)-1]
TimeArray=TimeArray[1:length(TimeArray)-1]
plot(TimeArray, meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(TimeArray, meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
## Open a graphics window (Darwin stands for a Mac computer)
if (Sys.info()["sysname"]=="Darwin"){
quartz(width=WinWidth*2, height=WinHeight*2)
# X11(width=WinWidth, height=WinHeight, type="cairo")
} else {
windows(width = WinWidth*2, height = WinHeight*2)
}
# plot(array(seq(dT,(Time*dT),dT)), vecD, type = 'l', col = "blue")
# plot(array(seq(dT,(Time*dT),dT)), vecDis, type = 'l', col = "red")
par(mar=c(5, 5, 4, 2) + 0.1)
plot(array(seq(dT,(Time*dT/saveTime),dT)), meanVeg, type = 'l', col = "black",
main = "Vegetation cover", ylab = "Mean veg. cover [g DW/m²]",
xlab = "time [s]")
NumFrames = 4*300         # Number of times the graph is updated
EndTime   = 4*6*NumFrames   # The simulation duration
NumFrames = 4*300         # Number of times the graph is updated
EndTime   = 6*NumFrames   # The simulation duration
library(DAISIE)
print(Galapagos)
library(DAISIE)
view(Galapagos_datatable)
library(readr)
rep_2_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_2/rep_2_branching.txt",
col_names = FALSE)
View(rep_2_branching)
library(DAISIE)
DAISIE_dataprep(rep_2_branching,10,100)
library(readr)
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = {"Clade_name","Status","Missing_species","Branching_times"})
View(rep_1_branching)
library(readr)
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = FALSE)
View(rep_1_branching)
DAISIE_sim(4, 1000, c(0.9, 0.09, 1000000000, 0.002, 0.87), 100, 'CS', 25)
DAISIE_sim(4, 1000, c(0.2, 0.09, 10, 0.2, 0.87), 100, 'CS', 25)
DAISIE_sim(4, 1000, c(0.2, 0.09, 10, 0.2, 0.87), 5, 'CS', 25)
data <- DAISIE_sim(4, 1000, c(0.2, 0.09, 10, 0.2, 0.87), 5, 'CS', 25)
data
col_names = {"Clade_name", "Status", "Missing_species", "Branching_times"}
col_names = list("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
col_names = vector("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
col_names("Clade_name", "Status", "Missing_species", "Branching_times")
col_names = c("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_1_branching)
DAISIE_dataprep(rep_1_branching,10,100)
prepData <- DAISIE_dataprep(rep_1_branching,10,100)
estimates <- DAISIE_ML(prepData)
prepData
rep_5_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_5_branching)
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_1_branching)
library(DAISIE)
library(readr)
col_names = c("Clade_name", "Status", "Missing_species", "Branching_times")
rep_1_branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/test_sims/sim_1/rep_1_branching.txt",
col_names = col_names)
View(rep_1_branching)
prepData <- DAISIE_dataprep(rep_1_branching,10,100)
DAISIE_plot_island(prepData,10)
DAISIE_plot_island(prepData,10)
rm(list = ls())
library(DAISIE)
library(readr)
dir_name_sims <- "sims/"
sim_names <- dir(path = dir_name_sims)
sim_names2 <- sim_names[round(length(sim_names)/3):round(2*length(sim_names)/3)]
parameter_sets <- read.csv(file = "parameter_sets.txt",header = T,sep = ",")
for(sim_name in sim_names2) {
print(sim_name)
replicate_estimates = list()
parameters <- as.vector(parameter_sets[which(parameter_sets[,1]==sim_name),])
print(parameters)
assertthat::are_equal(sim_name, as.character(parameters[[1]]))
archiImmi <- parameters[[2]]
archiMig <- parameters[[3]]
archiCladoL <- parameters[[4]]
archiAnaL <- parameters[[5]]
archiExtL <- parameters[[6]]
archiCladoG <- parameters[[7]]
archiAnaG <- parameters[[8]]
archiExtG <- parameters[[9]]
archiKPerIsl <- parameters[[10]]
archiNIsl <- parameters[[11]]
archiAge <- parameters[[12]]
archiMainlandSp <- parameters[[13]]
archiReplicates <- parameters[[14]]
immi <- archiImmi * archiNIsl
clado <- archiCladoL + archiCladoG
ana <- archiAnaL + archiAnaG
ext <- archiExtL + archiExtG
K <- archiKPerIsl * archiNIsl
initOptPars <- c(clado,ext,K,immi,ana)
for(rep in 1:archiReplicates) {
branching <- read_csv(paste(dir_name_sims, sim_name, "/rep_", rep, "_branching.txt", sep = ""),
col_names = TRUE)
prepData <- DAISIE_dataprep(branching,island_age = archiAge, M = archiMainlandSp)
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
}
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
assertthat::are_equal(length(replicate_estimates),archiReplicates)
replicate_estimates
save(replicate_estimates, parameters, initOptPars,
file = paste("estimates/",sim_name, "_estimates.Rdata", sep = ""))
}
if(!is.na.data.frame(branching)) {
prepData <- DAISIE_dataprep(branching,island_age = archiAge, M = archiMainlandSp)
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
}
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
library(readr)
branching <- read_csv("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/sims/high_K&low_clado_l&high_ext_l/rep_104_branching.txt")
View(branching)
if(!is.na.data.frame(branching)) {
prepData <- DAISIE_dataprep(branching,island_age = archiAge, M = archiMainlandSp)
for(i in 2:length(prepData)) {
prepData[[i]]$missing_species <- as.numeric(prepData[[i]]$missing_species)
}
replicate_estimates[rep] <- DAISIE_ML(datalist = prepData,
datatype = "single",
initparsopt = initOptPars,
idparsopt = c(1,2,3,4,5),
parsfix = c(),
idparsfix = c())
}
else {
replicate_estimates[rep] <- data.frame()
}
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_branching3.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_branching.R')
setwd("~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline")
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_branching.R')
library(DAISIE)
load("C:/Users/Sebastian/Documents/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/estimates/double_global_estimates.Rdata")
replicate_estimates
load("C:/Users/Sebastian/Documents/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/estimates/double_global_estimates.Rdata")
rm(list = ls())
library(DAISIE)
library(readr)
replicates <- 1000
main_dir <- "../"
parameter_file <- "more_parameters.txt"
dir_name_sims <- "sims/"
sim_names <- dir(path = paste(main_dir,dir_name_sims, sep= ""))
parameter_sets <- read.csv(file = paste(main_dir,parameter_file,sep = ""),header = T, sep = ",")
parameter_file
parameter_sets
sim_names <- parameter_sets$name
sim_names
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT_more_pars.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT_more_pars.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT_more_pars.R')
main_dir <- "../"
parameter_file <- "more_parameters.txt"
dir_name_sims <- "sims/"
parameter_sets <- read.csv(file = paste(main_dir,parameter_file,sep = ""),header = T, sep = ",")
View(parameter_sets)
View(parameter_sets)
rm(list = ls())
library(DAISIE)
library(readr)
replicates <- 1000
main_dir <- "../"
parameter_file <- "more_parameters.txt"
dir_name_sims <- "sims/"
parameter_sets <- read.csv(file = paste(main_dir,parameter_file,sep = ""),header = T, sep = ",")
sim_names <- parameter_sets$name
View(parameter_sets)
View(parameter_sets)
rm(list = ls())
library(DAISIE)
library(readr)
replicates <- 1000
main_dir <- "../"
parameter_file <- "more_parameters.txt"
dir_name_sims <- "sims/"
parameter_sets <- read.csv(file = paste(main_dir,parameter_file,sep = ""),header = T, sep = ",")
sim_names <- parameter_sets$name
rm(list = ls())
library(DAISIE)
library(readr)
replicates <- 1000
main_dir <- "../"
parameter_file <- "more_parameters.txt"
dir_name_sims <- "sims/"
parameter_sets <- read.csv(file = paste(main_dir,parameter_file,sep = ""),header = T, sep = ",")
sim_names <- parameter_sets$name
View(parameter_sets)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT_more_pars.R')
load("C:/Users/Sebastian/Documents/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/estimates/double_global_estimates.Rdata")
View(stt_all)
View(parameters)
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT.R')
source('~/Studium/Master/RU Groningen/Research Project 1/DAISIE_Archipelago/ArchiDAISIE/ArchiDAISIE/R_scripts_pipeline/pipeline_to_DAISIE_STT.R')
